[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "contractor job evaluation form",
  "enabled": 1,
  "modified": "2025-03-28 11:01:12.023354",
  "module": "Total DMS Customizations",
  "name": "Contractor evaluation form",
  "script": "frappe.ui.form.on('contractor job evaluation form', {\n\trefresh(frm) {\n        // Refresh logic if needed\n    },\n\n    points_awarded(frm) {\n        calculate_weighted_points(frm);\n    },\n    points_quality(frm) {\n        calculate_weighted_points_quality(frm);\n    },\n    points_variations(frm) {\n        calculate_weighted_points_variations(frm);\n    },\n    points_reporting(frm) {\n        calculate_weighted_points_reporting(frm);\n    },\n    points_compliance(frm) {\n        calculate_weighted_points_compliance(frm);\n    },\n    point_safety(frm) {\n        calculate_weighted_points_safety(frm);\n    },\n        \n    _weight(frm) {\n        calculate_weighted_points(frm);\n    },\n    weight_quality(frm) {\n        calculate_weighted_points_quality(frm);\n    },\n    weight_variations(frm) {\n        calculate_weighted_points_variations(frm);   \n    },\n    weight_safety(frm) {\n        calculate_weighted_points_safety(frm);\n    },\n    weight_reporting(frm) {\n        calculate_weighted_points_reporting(frm);\n    },\n    weight__compliance(frm) {\n        calculate_weighted_points_compliance(frm);\n    },\n    guidelines_timeliness(frm){\n        prefill_using_guidelines(frm);\n    },\n    guidelines_quality(frm){\n        prefill_using_quality(frm);\n    },\n    guideline_variations(frm){\n        prefill_using_variations(frm);\n    },\n    guidelines_safety(frm){\n        prefill_using_safety(frm);\n    },\n    guideline_reporting(frm){\n        prefill_using_reporting(frm);\n    },\n     guideline_compliance(frm){\n        prefill_using_compliance(frm);\n    }\n});\n\nfunction calculate_weighted_points(frm) {\n    if (frm.doc.points_awarded && frm.doc._weight) {\n        frm.set_value('weighted_points', frm.doc.points_awarded * (frm.doc._weight / 100) * 5);\n    } else {\n        frm.set_value('weighted_points', 0);\n    }\n    update_total_points(frm);\n}\n\nfunction calculate_weighted_points_quality(frm) {\n    if (frm.doc.points_quality && frm.doc.weight_quality) {\n        frm.set_value('weightpoints_quality', frm.doc.points_quality * (frm.doc.weight_quality / 100) * 5);\n    } else {\n        frm.set_value('weightpoints_quality', 0);\n    }\n    update_total_points(frm);\n}\n\nfunction prefill_using_guidelines(frm) {\n    // Mapping guidelines to rating and points\n    const mapping = {\n        \"Completed on schedule.\": { rating: 1, points: 20 },\n        \"Completed right on schedule.\": { rating: 2, points: 15 },\n        \"Delayed but with valid reasons.\": { rating: 3, points: 10 },\n        \"Delayed with fairy valid reasons.\": { rating: 4, points: 5 },\n        \"Delayed with no valid reasons.\": { rating: 5, points: 0 }\n    };\n\n    const guideline = frm.doc.guidelines_timeliness;\n    if (guideline && mapping.hasOwnProperty(guideline)) {\n        // Set Rating and Points based on the guideline selection\n        frm.set_value(\"rating_timeliness\", mapping[guideline].rating);\n        frm.set_value(\"point_timeliness\", mapping[guideline].points);\n         frm.set_value(\"points_awarded\", mapping[guideline].points);\n       \n    }\n}\nfunction prefill_using_quality(frm) {\n    // Mapping guidelines to rating and points\n    const mapping = {\n        \"Quality of workmanship and materials used exceeds  expectations.\": { rating: 1, points: 20 },\n        \"Quality of workmanship and materials used meets expectations.\": { rating: 2, points: 15 },\n        \"Quality of workmanship and materials used was fairly acceptable.\": { rating: 3, points: 10 },\n        \"Quality of workmanship and materials used below expectations.\": { rating: 4, points: 5 },\n        \"Quality of workmanship and materials used unacceptable.\": { rating: 5, points: 0 }\n    };\n    \n    const quality = frm.doc.guidelines_quality;\n    if (quality && mapping.hasOwnProperty(quality)) {\n        // Set Rating and Points based on the guideline selection\n        frm.set_value(\"rating_quality\", mapping[quality].rating);\n        frm.set_value(\"point_quality\", mapping[quality].points);\n         frm.set_value(\"points_quality\", mapping[quality].points);\n       \n    }\n}\nfunction prefill_using_variations(frm) {\n    // Mapping variations to rating and points\n    const mapping = {\n        \"Job completed without any variation.\": { rating: 1, points: 20 },\n        \"Job completed with a single  variation.(less 5% of scope)\": { rating: 2, points: 15 },\n        \"Job completed with more than one variation.(less 5-25%)\": { rating: 3, points: 10 },\n        \"Job completed with major variation.(less 25-50%)\": { rating: 4, points: 5 },\n        \"Job completed with several major variation.(over 50%)\": { rating: 5, points: 0 }\n    };\n\n    const variations = frm.doc.guideline_variations;\n    if (variations && mapping.hasOwnProperty(variations)) {\n        // Set Rating and Points based on the variations selection\n        frm.set_value(\"rating_variations\", mapping[variations].rating);\n        frm.set_value(\"point_variations\", mapping[variations].points);\n        frm.set_value(\"points_variations\", mapping[variations].points);\n       \n    }\n}\nfunction prefill_using_safety(frm) {\n    // Mapping safety to rating and points\n    const mapping = {\n        \"Job completed with no incident.\": { rating: 1, points: 20 },\n        \"Near miss experienced during works.\": { rating: 2, points: 15 },\n        \"Minor incident experienced during works.(first aid cases)\": { rating: 3, points: 10 },\n        \"Major incident experienced during works.( leading to LTI)\": { rating: 4, points: 5 },\n        \"Incident with catastrophic impact.(Death and property damage)\": { rating: 5, points: 0 }\n    };\n\n    const safety = frm.doc.guidelines_safety;\n    if (safety && mapping.hasOwnProperty(safety)) {\n        // Set Rating and Points based on the safety selection\n        frm.set_value(\"rating_safety\", mapping[safety].rating);\n        frm.set_value(\"point_safe\", mapping[safety].points);\n        frm.set_value(\"points_safety\", mapping[safety].points);\n       \n    }\n}\nfunction prefill_using_reporting(frm) {\n    // Mapping reporting to rating and points\n    const mapping = {\n        \"Above 100% reporting.\": { rating: 1, points: 20 },\n        \"50-100% reporting.\": { rating: 2, points: 15 },\n        \"10-50% reporting.\": { rating: 3, points: 10 },\n        \"Less than 10% reporting.\": { rating: 4, points: 5 },\n        \"No nearmiss reported during works.\": { rating: 5, points: 0 }\n    };\n\n    const reporting = frm.doc.guideline_reporting;\n    if (reporting && mapping.hasOwnProperty(reporting)) {\n        // Set Rating and Points based on the repoting selection\n        frm.set_value(\"rating_reporting\", mapping[reporting].rating);\n        frm.set_value(\"point_reporting\", mapping[reporting].points);\n        frm.set_value(\"points_reporting\", mapping[reporting].points);\n       \n    }\n}\nfunction prefill_using_compliance(frm) {\n    // Mapping compliance to rating and points\n    const mapping = {\n        \"No single case of non compliance.\": { rating: 1, points: 20 },\n        \"Single very minor case of non compliance.\": { rating: 2, points: 15 },\n        \"Single minor case of non compliance.(stop card issued)\": { rating: 3, points: 10 },\n        \"Several non compliance reported.(Temporary suspension of works)\": { rating: 4, points: 5 },\n        \"Major non compliance reported.( Total shutdown of worksite)\": { rating: 5, points: 0 }\n    };\n\n    const compliance = frm.doc.guideline_compliance;\n    if (compliance && mapping.hasOwnProperty(compliance)) {\n        // Set Rating and Points based on the repoting selection\n        frm.set_value(\"rating_compliance\", mapping[compliance].rating);\n        frm.set_value(\"point_compliance\", mapping[compliance].points);\n        frm.set_value(\"points_compliance\", mapping[compliance].points);\n       \n    }\n}\nfunction calculate_weighted_points_variations(frm) {\n    if (frm.doc.points_variations && frm.doc.weight_variations) {\n        frm.set_value('weightpoints_variations', (frm.doc.points_variations * frm.doc.weight_variations / 100) * 5);\n    } else {\n        frm.set_value('weightpoints_variations', 0);\n    }\n    update_total_points(frm);\n}\n\nfunction calculate_weighted_points_safety(frm) {\n    if (frm.doc.point_safety && frm.doc.weight_safety) {\n        frm.set_value('weightpoints_safety', (frm.doc.point_safety * frm.doc.weight_safety / 100) * 5);\n    } else {\n        frm.set_value('weightpoints_safety', 0);\n    }\n    update_total_points(frm);\n}\n\nfunction calculate_weighted_points_reporting(frm) {\n    if (frm.doc.points_reporting && frm.doc.weight_reporting) {\n        frm.set_value('weightpoints_reporting', (frm.doc.points_reporting * frm.doc.weight_reporting / 100) * 5);\n    } else {\n        frm.set_value('weightpoints_reporting', 0);\n    }\n    update_total_points(frm);\n}\n\nfunction calculate_weighted_points_compliance(frm) {\n    if (frm.doc.points_compliance && frm.doc.weight__compliance) {\n        frm.set_value('weightpoints__compliance', (frm.doc.points_compliance * frm.doc.weight__compliance / 100) * 5);\n    } else {\n        frm.set_value('weightpoints__compliance', 0);\n    }\n    update_total_points(frm);\n}\n\n// Update total points dynamically\nfunction update_total_points(frm) {\n    const total = (\n        (frm.doc.weightpoints_quality || 0) +\n        (frm.doc.weightpoints_variations || 0) +\n        (frm.doc.weightpoints_reporting || 0) +\n        (frm.doc.weightpoints_safety || 0) +\n        (frm.doc.weightpoints__compliance || 0)+\n        (frm.doc.weighted_points || 0)\n    );\n    frm.set_value('total_points', total);\n}",
  "view": "Form"
 }
]